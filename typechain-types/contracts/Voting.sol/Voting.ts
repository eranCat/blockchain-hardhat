/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balToken"
      | "candidateCount"
      | "candidateNFT"
      | "getAllCandidates"
      | "getCandidate"
      | "getCandidateNames"
      | "getResults"
      | "getVotingWindow"
      | "getWinner"
      | "hasVoted"
      | "owner"
      | "renounceOwnership"
      | "rewardAmount"
      | "setCandidate"
      | "setCandidates"
      | "setVoterRoot"
      | "setVotingWindow"
      | "transferOwnership"
      | "vote"
      | "voteByQuestionnaire"
      | "voterRoot"
      | "votingEnd"
      | "votingStart"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateSet"
      | "CandidatesBatchSet"
      | "NFTMintFailed"
      | "OwnershipTransferred"
      | "RewardMinted"
      | "VoteCast"
      | "VoterRootSet"
      | "VotingWindowSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "balToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "candidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingWindow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string, [BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidates",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoterRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingWindow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voteByQuestionnaire",
    values: [[BigNumberish, BigNumberish, BigNumberish], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "voterRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "votingEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingStart",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoterRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteByQuestionnaire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votingEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingStart",
    data: BytesLike
  ): Result;
}

export namespace CandidateSetEvent {
  export type InputTuple = [
    candidateId: BigNumberish,
    name: string,
    positions: [BigNumberish, BigNumberish, BigNumberish]
  ];
  export type OutputTuple = [
    candidateId: bigint,
    name: string,
    positions: [bigint, bigint, bigint]
  ];
  export interface OutputObject {
    candidateId: bigint;
    name: string;
    positions: [bigint, bigint, bigint];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CandidatesBatchSetEvent {
  export type InputTuple = [count: BigNumberish];
  export type OutputTuple = [count: bigint];
  export interface OutputObject {
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMintFailedEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardMintedEvent {
  export type InputTuple = [voter: AddressLike, amount: BigNumberish];
  export type OutputTuple = [voter: string, amount: bigint];
  export interface OutputObject {
    voter: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    candidateId: BigNumberish,
    isAnonymous: boolean
  ];
  export type OutputTuple = [
    voter: string,
    candidateId: bigint,
    isAnonymous: boolean
  ];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
    isAnonymous: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRootSetEvent {
  export type InputTuple = [root: BytesLike];
  export type OutputTuple = [root: string];
  export interface OutputObject {
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingWindowSetEvent {
  export type InputTuple = [startTime: BigNumberish, endTime: BigNumberish];
  export type OutputTuple = [startTime: bigint, endTime: bigint];
  export interface OutputObject {
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balToken: TypedContractMethod<[], [string], "view">;

  candidateCount: TypedContractMethod<[], [bigint], "view">;

  candidateNFT: TypedContractMethod<[], [string], "view">;

  getAllCandidates: TypedContractMethod<
    [],
    [
      [string[], [bigint, bigint, bigint][], bigint[]] & {
        names: string[];
        positions: [bigint, bigint, bigint][];
        votes: bigint[];
      }
    ],
    "view"
  >;

  getCandidate: TypedContractMethod<
    [candidateId: BigNumberish],
    [
      [string, [bigint, bigint, bigint], bigint] & {
        name: string;
        positions: [bigint, bigint, bigint];
        voteCount: bigint;
      }
    ],
    "view"
  >;

  getCandidateNames: TypedContractMethod<[], [string[]], "view">;

  getResults: TypedContractMethod<
    [],
    [[string[], bigint[]] & { names: string[]; votes: bigint[] }],
    "view"
  >;

  getVotingWindow: TypedContractMethod<
    [],
    [[bigint, bigint] & { start: bigint; end: bigint }],
    "view"
  >;

  getWinner: TypedContractMethod<[], [string], "view">;

  hasVoted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardAmount: TypedContractMethod<[], [bigint], "view">;

  setCandidate: TypedContractMethod<
    [name: string, positions: [BigNumberish, BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;

  setCandidates: TypedContractMethod<[names: string[]], [void], "nonpayable">;

  setVoterRoot: TypedContractMethod<[root: BytesLike], [void], "nonpayable">;

  setVotingWindow: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [candidateId: BigNumberish, merkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  voteByQuestionnaire: TypedContractMethod<
    [
      positions: [BigNumberish, BigNumberish, BigNumberish],
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  voterRoot: TypedContractMethod<[], [string], "view">;

  votingEnd: TypedContractMethod<[], [bigint], "view">;

  votingStart: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "candidateCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidateNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllCandidates"
  ): TypedContractMethod<
    [],
    [
      [string[], [bigint, bigint, bigint][], bigint[]] & {
        names: string[];
        positions: [bigint, bigint, bigint][];
        votes: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [candidateId: BigNumberish],
    [
      [string, [bigint, bigint, bigint], bigint] & {
        name: string;
        positions: [bigint, bigint, bigint];
        voteCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidateNames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { names: string[]; votes: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingWindow"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { start: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCandidate"
  ): TypedContractMethod<
    [name: string, positions: [BigNumberish, BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCandidates"
  ): TypedContractMethod<[names: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoterRoot"
  ): TypedContractMethod<[root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingWindow"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [candidateId: BigNumberish, merkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteByQuestionnaire"
  ): TypedContractMethod<
    [
      positions: [BigNumberish, BigNumberish, BigNumberish],
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voterRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votingEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingStart"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CandidateSet"
  ): TypedContractEvent<
    CandidateSetEvent.InputTuple,
    CandidateSetEvent.OutputTuple,
    CandidateSetEvent.OutputObject
  >;
  getEvent(
    key: "CandidatesBatchSet"
  ): TypedContractEvent<
    CandidatesBatchSetEvent.InputTuple,
    CandidatesBatchSetEvent.OutputTuple,
    CandidatesBatchSetEvent.OutputObject
  >;
  getEvent(
    key: "NFTMintFailed"
  ): TypedContractEvent<
    NFTMintFailedEvent.InputTuple,
    NFTMintFailedEvent.OutputTuple,
    NFTMintFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardMinted"
  ): TypedContractEvent<
    RewardMintedEvent.InputTuple,
    RewardMintedEvent.OutputTuple,
    RewardMintedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterRootSet"
  ): TypedContractEvent<
    VoterRootSetEvent.InputTuple,
    VoterRootSetEvent.OutputTuple,
    VoterRootSetEvent.OutputObject
  >;
  getEvent(
    key: "VotingWindowSet"
  ): TypedContractEvent<
    VotingWindowSetEvent.InputTuple,
    VotingWindowSetEvent.OutputTuple,
    VotingWindowSetEvent.OutputObject
  >;

  filters: {
    "CandidateSet(uint256,string,uint8[3])": TypedContractEvent<
      CandidateSetEvent.InputTuple,
      CandidateSetEvent.OutputTuple,
      CandidateSetEvent.OutputObject
    >;
    CandidateSet: TypedContractEvent<
      CandidateSetEvent.InputTuple,
      CandidateSetEvent.OutputTuple,
      CandidateSetEvent.OutputObject
    >;

    "CandidatesBatchSet(uint256)": TypedContractEvent<
      CandidatesBatchSetEvent.InputTuple,
      CandidatesBatchSetEvent.OutputTuple,
      CandidatesBatchSetEvent.OutputObject
    >;
    CandidatesBatchSet: TypedContractEvent<
      CandidatesBatchSetEvent.InputTuple,
      CandidatesBatchSetEvent.OutputTuple,
      CandidatesBatchSetEvent.OutputObject
    >;

    "NFTMintFailed(string)": TypedContractEvent<
      NFTMintFailedEvent.InputTuple,
      NFTMintFailedEvent.OutputTuple,
      NFTMintFailedEvent.OutputObject
    >;
    NFTMintFailed: TypedContractEvent<
      NFTMintFailedEvent.InputTuple,
      NFTMintFailedEvent.OutputTuple,
      NFTMintFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardMinted(address,uint256)": TypedContractEvent<
      RewardMintedEvent.InputTuple,
      RewardMintedEvent.OutputTuple,
      RewardMintedEvent.OutputObject
    >;
    RewardMinted: TypedContractEvent<
      RewardMintedEvent.InputTuple,
      RewardMintedEvent.OutputTuple,
      RewardMintedEvent.OutputObject
    >;

    "VoteCast(address,uint256,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterRootSet(bytes32)": TypedContractEvent<
      VoterRootSetEvent.InputTuple,
      VoterRootSetEvent.OutputTuple,
      VoterRootSetEvent.OutputObject
    >;
    VoterRootSet: TypedContractEvent<
      VoterRootSetEvent.InputTuple,
      VoterRootSetEvent.OutputTuple,
      VoterRootSetEvent.OutputObject
    >;

    "VotingWindowSet(uint64,uint64)": TypedContractEvent<
      VotingWindowSetEvent.InputTuple,
      VotingWindowSetEvent.OutputTuple,
      VotingWindowSetEvent.OutputObject
    >;
    VotingWindowSet: TypedContractEvent<
      VotingWindowSetEvent.InputTuple,
      VotingWindowSetEvent.OutputTuple,
      VotingWindowSetEvent.OutputObject
    >;
  };
}
